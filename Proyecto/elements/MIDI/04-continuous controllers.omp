; OM File Header - Saved 2024/09/22 15:55:10
; (7.03 :patc (om-make-point 14 98) (om-make-point 38 46) (om-make-point 911 715) "No documentation " 183 0 nil "2024/09/22 15:55:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "04-continuous controllers" (quote ((let ((box (om-load-boxcall (quote maqabs) "mymaquette" (om-load-maq-abs1 "mymaquette" (quote ((let ((box (om-load-tempobj1 "tempobj3" (quote nil) (list (quote yourobj) (let ((ominst (make-instance (quote ominstance) :name "tempobj3" :icon 138))) (setf (instance ominst) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110101 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (doc ominst) (str-with-nl "")) (setf (edition-params ominst) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil))) (setf (create-info ominst) (quote ("2014/02/11 2:11:49" "2017/03/07 20:24:32"))) ominst)) 1 1000 11000 (om-make-color 0.5 0.6 0.5) nil t 33 99 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj2" (quote nil) (list (quote yourobj) (let ((ominst (make-instance (quote ominstance) :name "tempobj2" :icon 918))) (setf (instance ominst) (let ((rep (make-instance (quote midi-mix-console) :midiport nil :nbtracks 1))) (setf (channels-ctrl rep) (list (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport nil :midichannel 1 :program 2 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 0 :from-file t)))) (setf (miditrack rep) (quote 0)) rep)) (setf (doc ominst) (str-with-nl "")) (setf (edition-params ominst) (pairlis (quote (player deltapict zoom obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems scale)) (list (quote :midishare-rt) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 370 280) (om-make-point 10 40) (quote t) nil))) (setf (create-info ominst) (quote ("2014/02/11 2:11:49" "2017/03/07 20:24:32"))) ominst)) 1 0 0 (om-make-color 0.5 0.6 0.5) nil t 33 66 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj1" (quote nil) (list (quote yourobj) (let ((ominst (make-instance (quote ominstance) :name "tempobj1" :icon 903))) (setf (instance ominst) (let ((newobj (when (find-class (quote midicontrol) nil) (let ((newctrl (simple-bpf-from-list (quote (158 357 555 754 953 1152 1350 1549 1748 1947 2145 2344 2543 2742 2940 3139 3338 3536 3735 3934 4133 4331 4530 4729 4928 5126 5325 5524 5723 5921 6120 6319 6518 6716 6915 7114 7312 7511 7710 7909 8107 8306 8505 8704 8902 9101 9300 9499 9697 9896)) (quote (440 1637 2834 4031 4884 5789 6774 7174 7366 7213 7060 6826 6492 6182 5860 5509 4623 2964 3007 3050 3093 3358 3797 4428 5090 4940 4771 4520 3818 3117 2171 1339 1201 1083 965 920 881 841 800 759 714 669 624 585 562 538 513 484 454 425)) (quote midicontrol) 0))) (setf (bpfcolor newctrl) (om-make-color 0 0 0)) (setf (ctrltype newctrl) (quote "PitchWheel") (ref newctrl) 0 (port newctrl) 0 (chan newctrl) (quote 1) (ev-type newctrl) (quote :pitchbend) (ctr-num newctrl) 14) newctrl)))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (doc ominst) (str-with-nl "")) (setf (edition-params ominst) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil))) (setf (create-info ominst) (quote ("2014/02/11 2:11:49" "2017/03/07 20:24:32"))) ominst)) 1 1000 9896 (om-make-color 0.5 0.6 0.5) nil t 33 33 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) (quote (0 15400 -10 109)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) t 6.110101 nil "" "off" (quote (1)) (quote (1)) nil (om-make-point 543 22) (om-make-point 834 460)) (quote ((om-load-inputfun (quote input-funbox) "time rate (number) or offset list" "time" (list 1000 0 1000)) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "objs" nil))) (om-make-point 302 508) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 1))) (om-make-point 59 242) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MIDI-MIX-CONSOLE" (quote midi-mix-console) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "output port number" "midiport" nil) (om-load-inputfun (quote input-funbox) "number of tracks" "nbtracks" 1))) (om-make-point 348 273) (om-make-point 48 115) (let ((rep (make-instance (quote midi-mix-console) :midiport nil :nbtracks 1))) (setf (channels-ctrl rep) (list (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport nil :midichannel 1 :program 2 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 0 :from-file t)))) (setf (miditrack rep) (quote 0)) rep) "x" nil (pairlis (quote (player deltapict zoom obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems scale)) (list (quote :midishare-rt) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 80 560) (om-make-point 0 0) (quote t) nil)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 137 65) (quote "The midi-mix-console$can be used to set$local/initial MIDI$settings") "" (om-make-point 319 191) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 326 423) (om-make-point 64 42) nil nil "list" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 132 197) (om-make-point 33 34) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MIDICONTROL1" (quote midicontrol) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "type of event (string)" "ctrltype" "PitchWheel" (list (list "-- Tempo (bpm)" "Tempo") (list "-- KeyPress" "KeyPress") (list "-- ChanPress" "ChanPress") (list "-- PitchBend (-64 to 63)" "PitchBend") (list "-- PitchWheel (-8192 to 8191)" "PitchWheel") (list "00 Bank Select" "BankSelect") (list "01 Modulation Wheel" "ModulationWheel") (list "02 Breath Controller" "BreathController") (list "04 Foot Controller" "FootController") (list "05 Portamento Time" "PortamentoTime") (list "06 Data Entry MSB" "DataEntryMSB") (list "07 Channel Volume" "ChannelVolume") (list "08 Balance" "Balance") (list "10 Pan" "Pan") (list "11 Expression Controller" "ExpressionController") (list "12 Effect Control 1" "EffectControl1") (list "13 Effect Control 2" "EffectControl2") (list "16 General Purpose Controller 1" "GeneralPurposeController1") (list "17 General Purpose Controller 2" "GeneralPurposeController2") (list "18 General Purpose Controller 3" "GeneralPurposeController3") (list "19 General Purpose Controller 4" "GeneralPurposeController4") (list "00/32 Bank Select Fine" "BankSelectFine") (list "01/33 Modulation Wheel Fine" "ModulationWheelFine") (list "02/34 Breath Controller Fine" "BreathControllerFine") (list "04/36 Foot Controller Fine" "FootControllerFine") (list "05/37 Portamento Time Fine" "PortamentoTimeFine") (list "06/38 Data Entry MSB-LSB Fine" "DataEntryMSBLSB") (list "07/39 Channel Volume Fine" "ChannelVolumeFine") (list "08/40 Balance Fine" "BalanceFine") (list "10/42 Pan Fine" "PanFine") (list "11/43 Expression Controller Fine" "ExpressionControllerFine") (list "12/44 Effect Control 1 Fine" "EffectControl1Fine") (list "13/45 Effect Control 2 Fine" "EffectControl2Fine") (list "16/48 General Purpose Controller 1 Fine" "GeneralPurposeController1Fine") (list "17/49 General Purpose Controller 2 Fine" "GeneralPurposeController2Fine") (list "18/50 General Purpose Controller 3 Fine" "GeneralPurposeController3Fine") (list "19/51 General Purpose Controller 4 Fine" "GeneralPurposeController4Fine") (list "64 Damper Pedal on/off (Sustain)" "DamperPedal") (list "65 Portamento On/Off" "Portamento") (list "66 Sustenuto On/Off" "Sustenuto") (list "67 Soft Pedal On/Off" "SoftPedal") (list "68 Legato Footswitch" "LegatoFootswitch") (list "69 Hold 2 (on/off)" "Hold2") (list "70 Sound Controller 1" "SoundController1") (list "71 Sound Controller 2" "SoundController2") (list "72 Sound Controller 3" "SoundController3") (list "73 Sound Controller 4" "SoundController4") (list "74 Sound Controller 5" "SoundController5") (list "75 Sound Controller 6" "SoundController6") (list "76 Sound Controller 7" "SoundController7") (list "77 Sound Controller 8" "SoundController8") (list "78 Sound Controller 9" "SoundController9") (list "79 Sound Controller 10" "SoundController10") (list "84 Portamento Control" "PortamentoControl") (list "91 Effects 1 Depth" "Effects1Depth") (list "92 Effects 2 Depth" "Effects2Depth") (list "93 Effects 3 Depth" "Effects3Depth") (list "94 Effects 4 Depth" "Effects4Depth") (list "95 Effects 5 Depth" "Effects5Depth") (list "96 Data Increment" "DataIncrement") (list "-- Private" "Private"))) (om-load-inputfun (quote input-funbox) "event dates (ms)" "Ldates" nil) (om-load-inputfun (quote input-funbox) "track number" "ref" nil) (om-load-inputfun (quote input-funbox) "output port number" "port" 0) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1) (om-load-inputfun (quote input-funbox) "value list" "Lvalues" nil))) (om-make-point 59 127) (om-make-point 210 69) (let ((newobj (when (find-class (quote midicontrol) nil) (let ((newctrl (simple-bpf-from-list (quote (158 777 1043 1398 1735 2258 2498 2881 3295 3455 4220 4558 4932 5493 5960 6279 6484 6930 7441 7919 8652 9225 9896)) (quote (440 4168 5251 7010 7376 6973 6562 5965 5234 2946 3112 3859 5105 4629 2980 1368 1221 956 856 757 591 524 425)) (quote midicontrol) 0))) (setf (bpfcolor newctrl) (om-make-color 0 0 0)) (setf (ctrltype newctrl) (quote "PitchWheel") (ref newctrl) 0 (port newctrl) 0 (chan newctrl) (quote 1) (ev-type newctrl) (quote :pitchbend) (ctr-num newctrl) 14) newctrl)))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote :bpfplayer) (quote t) 0 0 (om-make-point 55 40) (om-make-point 1031 464) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MIDICONTROL" (quote midicontrol) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "type of event (string)" "ctrltype" "PitchBend" (list (list "-- Tempo (bpm)" "Tempo") (list "-- KeyPress" "KeyPress") (list "-- ChanPress" "ChanPress") (list "-- PitchBend (-64 to 63)" "PitchBend") (list "-- PitchWheel (-8192 to 8191)" "PitchWheel") (list "00 Bank Select" "BankSelect") (list "01 Modulation Wheel" "ModulationWheel") (list "02 Breath Controller" "BreathController") (list "04 Foot Controller" "FootController") (list "05 Portamento Time" "PortamentoTime") (list "06 Data Entry MSB" "DataEntryMSB") (list "07 Channel Volume" "ChannelVolume") (list "08 Balance" "Balance") (list "10 Pan" "Pan") (list "11 Expression Controller" "ExpressionController") (list "12 Effect Control 1" "EffectControl1") (list "13 Effect Control 2" "EffectControl2") (list "16 General Purpose Controller 1" "GeneralPurposeController1") (list "17 General Purpose Controller 2" "GeneralPurposeController2") (list "18 General Purpose Controller 3" "GeneralPurposeController3") (list "19 General Purpose Controller 4" "GeneralPurposeController4") (list "00/32 Bank Select Fine" "BankSelectFine") (list "01/33 Modulation Wheel Fine" "ModulationWheelFine") (list "02/34 Breath Controller Fine" "BreathControllerFine") (list "04/36 Foot Controller Fine" "FootControllerFine") (list "05/37 Portamento Time Fine" "PortamentoTimeFine") (list "06/38 Data Entry MSB-LSB Fine" "DataEntryMSBLSB") (list "07/39 Channel Volume Fine" "ChannelVolumeFine") (list "08/40 Balance Fine" "BalanceFine") (list "10/42 Pan Fine" "PanFine") (list "11/43 Expression Controller Fine" "ExpressionControllerFine") (list "12/44 Effect Control 1 Fine" "EffectControl1Fine") (list "13/45 Effect Control 2 Fine" "EffectControl2Fine") (list "16/48 General Purpose Controller 1 Fine" "GeneralPurposeController1Fine") (list "17/49 General Purpose Controller 2 Fine" "GeneralPurposeController2Fine") (list "18/50 General Purpose Controller 3 Fine" "GeneralPurposeController3Fine") (list "19/51 General Purpose Controller 4 Fine" "GeneralPurposeController4Fine") (list "64 Damper Pedal on/off (Sustain)" "DamperPedal") (list "65 Portamento On/Off" "Portamento") (list "66 Sustenuto On/Off" "Sustenuto") (list "67 Soft Pedal On/Off" "SoftPedal") (list "68 Legato Footswitch" "LegatoFootswitch") (list "69 Hold 2 (on/off)" "Hold2") (list "70 Sound Controller 1" "SoundController1") (list "71 Sound Controller 2" "SoundController2") (list "72 Sound Controller 3" "SoundController3") (list "73 Sound Controller 4" "SoundController4") (list "74 Sound Controller 5" "SoundController5") (list "75 Sound Controller 6" "SoundController6") (list "76 Sound Controller 7" "SoundController7") (list "77 Sound Controller 8" "SoundController8") (list "78 Sound Controller 9" "SoundController9") (list "79 Sound Controller 10" "SoundController10") (list "84 Portamento Control" "PortamentoControl") (list "91 Effects 1 Depth" "Effects1Depth") (list "92 Effects 2 Depth" "Effects2Depth") (list "93 Effects 3 Depth" "Effects3Depth") (list "94 Effects 4 Depth" "Effects4Depth") (list "95 Effects 5 Depth" "Effects5Depth") (list "96 Data Increment" "DataIncrement") (list "-- Private" "Private"))) (om-load-inputfun (quote input-funbox) "event dates (ms)" "Ldates" nil) (om-load-inputfun (quote input-funbox) "track number" "ref" nil) (om-load-inputfun (quote input-funbox) "output port number" "port" 1) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" nil) (om-load-inputfun (quote input-funbox) "value list" "Lvalues" nil))) (om-make-point 73 314) (om-make-point 187 69) (let ((newobj (when (find-class (quote midicontrol) nil) (let ((newctrl (simple-bpf-from-list (quote (158 357 555 754 953 1152 1350 1549 1748 1947 2145 2344 2543 2742 2940 3139 3338 3536 3735 3934 4133 4331 4530 4729 4928 5126 5325 5524 5723 5921 6120 6319 6518 6716 6915 7114 7312 7511 7710 7909 8107 8306 8505 8704 8902 9101 9300 9499 9697 9896)) (quote (440 1637 2834 4031 4884 5789 6774 7174 7366 7213 7060 6826 6492 6182 5860 5509 4623 2964 3007 3050 3093 3358 3797 4428 5090 4940 4771 4520 3818 3117 2171 1339 1201 1083 965 920 881 841 800 759 714 669 624 585 562 538 513 484 454 425)) (quote midicontrol) 0))) (setf (bpfcolor newctrl) (om-make-color 0 0 0)) (setf (ctrltype newctrl) (quote "PitchWheel") (ref newctrl) 0 (port newctrl) 0 (chan newctrl) (quote 1) (ev-type newctrl) (quote :pitchbend) (ctr-num newctrl) 14) newctrl)))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 879 503) (om-make-point 260 201) 0 0 (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 563 41) (quote "Note :$In a maquette, Midi sequences, like other musical objects, can be streched to fit a visual time range.") "" (om-make-point 44 581) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 625 60) (quote "Warning : $Take care using the Tempo controller. If you put it in a maquette, it will change the Midi player tempo and cause an offset between midi playing and visual position of the cursor...") "" (om-make-point 44 624) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 509 262) (om-make-point 33 32) (list 1) "(1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 439 302) (om-make-point 109 78) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110101 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale cursor-mode)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -11) 0 0 1 nil 1000 0 (om-make-point 848 320) (om-make-point 55 40) 0 0 (quote t) nil (quote :interval))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 223 27) (quote "Ex : PitchBend Controller :") "" (om-make-point 23 92) nil (om-make-color 23/51 16/255 16/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 249 38) (quote "MIDI Continuous controller") "" (om-make-point 273 47) nil (om-make-color 0 0 0) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 1 nil 0) (6 0 1 0 nil 0) (5 0 1 1 nil 0) (7 0 4 0 nil 0) (2 0 4 1 nil 0) (11 0 4 2 nil 0) (1 0 7 0 nil 0) (10 0 11 6 nil 0))) nil 6.110101))
