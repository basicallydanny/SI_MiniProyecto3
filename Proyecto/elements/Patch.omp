; OM File Header - Saved 2024/09/26 19:44:57
; (7.03 :patc (om-make-point 9 94) (om-make-point -8 -8) (om-make-point 1920 977) "" 183 0 "2024/09/22 12:54:26" "2024/09/26 19:44:57")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:agruparSeqs.oml\"" "#P\"C:chooseTwo.oml\"" "#P\"C:ourLoop.oml\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((let ((box (om-load-boxcall (quote patch-box) "agruparSeqs 2" (quote ("elements" "agruparSeqs")) (quote ((om-load-inputfun (quote input-funbox) "" "SEQ1" nil) (om-load-inputfun (quote input-funbox) "" "SEQ2" nil) (om-load-inputfun (quote input-funbox) "" "SEQ3" nil))) (om-make-point 543 805) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 4" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 1200 481) (om-make-point 61 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 6" (quote t) (quote nil) (om-make-point 1267 490) (om-make-point 58 28) (list 0 300) "(0 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "escala 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 1220 531) (om-make-point 185 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6300) (7000) (6900) (6000) (6000) (6300) (7000) (6900) (6000) (6300) (7000) (6900) (6000) (6000) (6300) (7000) (6900) (6000))) :lonset (quote (0 300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 3600 3900 4200 4500 4800 5100 5400 5700)) :ldur (quote ((300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode measure onset player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 0 (quote :normal) nil nil (quote :midi-player) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -5) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 1057 444) (om-make-point 330 28) (list 60 63 70 69 60 60 63 70 69 60 63 70 69 60 60 63 70 69 60) "(60 63 70 69 60 60 63 70 69 60 63 70 69 60 60 63 70 69 60)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 1608 385) (om-make-point 61 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 4" (quote t) (quote nil) (om-make-point 1675 394) (om-make-point 58 28) (list 0 200) "(0 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "escala 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 1628 435) (om-make-point 185 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5900) (5700) (5500) (5300) (5200) (5000) (4800) (-100) (9100) (9700))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode measure onset player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 0 (quote :normal) nil nil (quote :midi-player) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -5) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 1571 745) (om-make-point 58 28) (list 0 300) "(0 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 1025 86) (om-make-point 873 28) (list 6800 7000 6800 6800 6500 7000 6800 6700 6500 6500 -1 6300 6300 6100 6300 6000 6000 6000 6000 6000 -1 7000 7000 6800 6700 6700 6700 6800 6800 6800 -1) "(6800 7000 6800 6800 6500 7000 6800 6700 6500 6500 -1  6300 6300 6100 6300 6000 6000 6000 6000 6000 -1 7000 7000 6800 6700 6700 6700 6800 6800 6800 -1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 1053 653) (om-make-point 58 28) (list 0 300) "(0 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 63 82) (om-make-point 22 28) 53 "53" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "chooseTwo" (quote ("elements" "chooseTwo")) (quote ((om-load-inputfun (quote input-funbox) "" "NOTES" nil) (om-load-inputfun (quote input-funbox) "" "N" 40))) (om-make-point 997 638) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 200)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" 3) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 988 731) (om-make-point 171 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (4800) (-1) (-1) (-1) (5000) (4800) (-1) (-1) (-1) (5200) (5400) (-1) (-1) (-1) (5200) (5200) (-1) (-1) (-1) (5400) (5000) (-1) (-1) (-1) (5000) (5400) (-1) (-1) (-1) (5200) (5200) (-1) (-1) (-1) (5000) (5000) (-1) (-1) (-1) (4800) (4800) (-1) (-1) (-1) (4800) (4800) (-1) (-1) (-1) (4800) (5000) (-1) (-1) (-1) (5000) (5200) (-1) (-1) (-1) (5000) (5000) (-1) (-1) (-1) (5200) (5000) (-1) (-1) (-1) (5400) (5400) (-1) (-1) (-1) (5400) (5400) (-1) (-1) (-1) (5000) (5400) (-1) (-1) (-1) (5200) (5400) (-1) (-1) (-1) (5400) (4800) (-1) (-1) (-1) (5200) (5000) (-1) (-1) (-1) (5000) (5200) (-1) (-1) (-1) (5000) (5400) (-1) (-1) (-1) (5000) (5400) (-1) (-1) (-1) (4800) (5200) (-1) (-1) (-1) (4800) (4800) (-1) (-1) (-1) (5000) (5200) (-1) (-1) (-1) (5000) (5000) (-1) (-1) (-1) (5200) (5200) (-1) (-1) (-1) (5200) (5200) (-1) (-1) (-1) (5000) (5400) (-1) (-1) (-1) (5000) (4800) (-1) (-1) (-1) (5200) (4800) (-1) (-1) (-1) (4800) (5000) (-1) (-1) (-1) (5200) (4800) (-1) (-1) (-1) (5000) (5000) (-1) (-1) (-1) (5000) (4800) (-1) (-1) (-1) (5400) (5000) (-1) (-1) (-1) (5200) (4800) (-1) (-1) (-1) (5400) (5400) (-1) (-1) (-1) (4800) (4800) (-1) (-1) (-1))) :lonset (quote (0 300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 3600 3900 4200 4500 4800 5100 5400 5700 6000 6300 6600 6900 7200 7500 7800 8100 8400 8700 9000 9300 9600 9900 10200 10500 10800 11100 11400 11700 12000 12300 12600 12900 13200 13500 13800 14100 14400 14700 15000 15300 15600 15900 16200 16500 16800 17100 17400 17700 18000 18300 18600 18900 19200 19500 19800 20100 20400 20700 21000 21300 21600 21900 22200 22500 22800 23100 23400 23700 24000 24300 24600 24900 25200 25500 25800 26100 26400 26700 27000 27300 27600 27900 28200 28500 28800 29100 29400 29700 30000 30300 30600 30900 31200 31500 31800 32100 32400 32700 33000 33300 33600 33900 34200 34500 34800 35100 35400 35700 36000 36300 36600 36900 37200 37500 37800 38100 38400 38700 39000 39300 39600 39900 40200 40500 40800 41100 41400 41700 42000 42300 42600 42900 43200 43500 43800 44100 44400 44700 45000 45300 45600 45900 46200 46500 46800 47100 47400 47700 48000 48300 48600 48900 49200 49500 49800 50100 50400 50700 51000 51300 51600 51900 52200 52500 52800 53100 53400 53700 54000 54300 54600 54900 55200 55500 55800 56100 56400 56700 57000 57300 57600 57900 58200 58500 58800 59100 59400 59700 60700)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.03 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset player scale winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems cursor-mode score-mode)) (list nil nil (quote :midi-player) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (om-make-point 10 40) (om-make-point 1838 516) 0 1000 nil 1 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 (quote t) (quote :normal) 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 971 586) (om-make-point 138 28) (list 4800 5200 5400 5000) "(4800 5200 5400 5000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 1584 125) (om-make-point 25 28) (list 1) "(1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 1530 332) (om-make-point 201 40) (list 60 59 57 55 53 52 50 48 -1 91 97) "(60 59 57 55 53 52 50 48 -1 91 97)$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 295 388) (om-make-point 25 28) (list 1) "(1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 108 189) (om-make-point 61 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 97 558) (om-make-point 100 70) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (7000) (7600) (8100) (8600) (9100) (9700))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (1600 2200 2800 3400 4000 4600 5200 5800 6400 7000 7600 8200 8800 9400 10000 10600 11200 11800 12400 13000 13600 14200 14800 15400 16000 16600 17200 17800 18400 19000 19600 20200 20800 21400 22000 22600 23200 23800 24400 25000 25600 26200 26800 27400 28000 28600 29200 29800 30400 31000 31600 32200 32800 33400 34000 34600 35200 35800 36400 37000 37600 38200 38800 39400 40000 40600 41200 41800 42400 43000 43600 44200 44800 45400 46000 46600 47200 47800 48400 49000 49600 50200 50800 51400 52000 52600 53200 53800 54400 55000 55600 56200 56800 57400 58000 58600 59200 59800 60400 61000 62000)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 25600 25800 26000 26200 26400 26600 26800 27000 27200 27400 27600 27800 28000 28200 28400 28600 28800 29000 29200 29400 29600 29800 30000 30200 30400 30600 30800 31000 31200 31400 31600 31800 32000 32200 32400 32600 32800 33000 33200 33400 33600 33800 34000 34200 34400 34600 34800 35000 35200 35400 35600 35800 36000 36200 36400 36600 36800 37000 37200 37400 37600 37800 38000 38200 38400 38600 38800 39000 39200 39400 39600 39800 40000 40200 40400 40600 40800 41000 41200 41400 41600 41800 42000 42200 42400 42600 42800 43000 43200 43400 43600 43800 44000 44200 44400 44600 44800 45000 45200 45400 45600 45800 46000 46200 46400 46600 46800 47000 47200 47400 47600 47800 48000 48200 48400 48600 48800 49000 49200 49400 49600 49800 50000 50200 50400 50600 50800 51000 51200 51400 51600 51800 52000 52200 52400 52600 52800 53000 53200 53400 53600 53800 54000 54200 54400 54600 54800 55000 55200 55400 55600 55800 56000 56200 56400 56600 56800 57000 57200 57400 57600 57800 58000 58200 58400 58600 58800 59000 59200 59400 59600 59800 60000 60200 60400 60600 60800 61000 61200 61400 62400)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g)) 24 2)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "ourLoop 2" (quote ("elements" "ourLoop")) (quote ((om-load-inputfun (quote input-funbox) "" "LST" nil) (om-load-inputfun (quote input-funbox) "" "N" 5))) (om-make-point 359 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "ourLoop" (quote ("elements" "ourLoop")) (quote ((om-load-inputfun (quote input-funbox) "" "LST" nil) (om-load-inputfun (quote input-funbox) "" "N" 5))) (om-make-point 854 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 1600)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 1600)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 90 655) (om-make-point 346 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (7000) (7600) (8100) (8600) (9100) (9700) (5600 5000) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5200) (5100) (4700) (5600 5100) (5400) (5100) (4700 5200) (5600) (5400) (5100 5000) (4700) (5600) (5400 5200) (5100) (4700) (5600 5300) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5300) (4700) (5600) (5400 5300) (5100) (4700) (5100 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5300) (5600) (5400) (5100 5200) (4700) (5600) (5400 5100) (5100) (4700) (5600 5000) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5200) (5100) (4700) (5600 5100) (5400) (5100) (4700 5200) (5600) (5400) (5100 5000) (4700) (5600) (5400 5200) (5100) (4700) (5600 5300) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5300) (4700) (5600) (5400 5300) (5100) (4700) (5100 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5300) (5600) (5400) (5100 5200) (4700) (5600) (5400 5100) (5100) (4700) (5600 5000) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5200) (5100) (4700) (5600 5100) (5400) (5100) (4700 5200) (5600) (5400) (5100 5000) (4700) (5600) (5400 5200) (5100) (4700) (5600 5300) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5300) (4700) (5600) (5400 5300) (5100) (4700) (5100 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5300) (5600) (5400) (5100 5200) (4700) (5600) (5400 5100) (5100) (4700) (5600 5000) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5200) (5100) (4700) (5600 5100) (5400) (5100) (4700 5200) (5600) (5400) (5100 5000) (4700) (5600) (5400 5200) (5100) (4700) (5600 5300) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5300) (4700) (5600) (5400 5300) (5100) (4700) (5100 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5300) (5600) (5400) (5100 5200) (4700) (5600) (5400 5100) (5100) (4700) (5600 5000) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5200) (5100) (4700) (5600 5100) (5400) (5100) (4700 5200) (5600) (5400) (5100 5000) (4700) (5600) (5400 5200) (5100) (4700) (5600 5300) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5300) (4700) (5600) (5400 5300) (5100) (4700) (5100 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5300) (5600) (5400) (5100 5200) (4700) (5600) (5400 5100) (5100) (4700))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 25600 25800 26000 26200 26400 26600 26800 27000 27200 27400 27600 27800 28000 28200 28400 28600 28800 29000 29200 29400 29600 29800 30000 30200 30400 30600 30800 31000 31200 31400 31600 31800 32000 32200 32400 32600 32800 33000 33200 33400 33600 33800 34000 34200 34400 34600 34800 35000 35200 35400 35600 35800 36000 36200 36400 36600 36800 37000 37200 37400 37600 37800 38000 38200 38400 38600 38800 39000 39200 39400 39600 39800 40000 40200 40400 40600 40800 41000 41200 41400 41600 41800 42000 42200 42400 42600 42800 43000 43200 43400 43600 43800 44000 44200 44400 44600 44800 45000 45200 45400 45600 45800 46000 46200 46400 46600 46800 47000 47200 47400 47600 47800 48000 48200 48400 48600 48800 49000 49200 49400 49600 49800 50000 50200 50400 50600 50800 51000 51200 51400 51600 51800 52000 52200 52400 52600 52800 53000 53200 53400 53600 53800 54000 54200 54400 54600 54800 55000 55200 55400 55600 55800 56000 56200 56400 56600 56800 57000 57200 57400 57600 57800 58000 58200 58400 58600 58800 59000 59200 59400 59600 59800 60000 60200 60400 60600 60800 61000 61200 61400 62400)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.03 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset player scale winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems cursor-mode score-mode)) (list nil nil (quote :midi-player) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (om-make-point 10 40) (om-make-point 841 256) 0 1000 nil 1 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 (quote t) (quote :normal) 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 5" (quote t) (quote nil) (om-make-point 1464 135) (om-make-point 58 28) (list 0 200) "(0 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 1349 172) (om-make-point 324 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7000) (6800) (6800) (6500) (7000) (6800) (6700) (6500) (6500) (-1) (6300) (6300) (6100) (6300) (6000) (6000) (6000) (6000) (6000) (-1) (7000) (7000) (6800) (6700) (6700) (6700) (6800) (6800) (6800) (-1))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.03 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode measure onset player scale winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems)) (list 0 (quote :normal) nil nil (quote :midi-player) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (om-make-point 10 40) (om-make-point 1072 358) 0 1000 nil 1 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1024 131) (om-make-point 25 28) (list 1) "(1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 689 94) (om-make-point 35 28) (list 2) "(2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 3" (quote t) (quote nil) (om-make-point 537 97) (om-make-point 82 28) (list 1600 2200) "(1600 2200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "agruparSeqs" (quote ("elements" "agruparSeqs")) (quote ((om-load-inputfun (quote input-funbox) "" "SEQ1" nil) (om-load-inputfun (quote input-funbox) "" "SEQ2" nil) (om-load-inputfun (quote input-funbox) "" "SEQ3" nil))) (om-make-point 436 476) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 433 147) (om-make-point 346 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (1600 2200 2800 3400 4000 4600 5200 5800 6400 7000 7600 8200 8800 9400 10000 10600 11200 11800 12400 13000 13600 14200 14800 15400 16000 16600 17200 17800 18400 19000 19600 20200 20800 21400 22000 22600 23200 23800 24400 25000 25600 26200 26800 27400 28000 28600 29200 29800 30400 31000 31600 32200 32800 33400 34000 34600 35200 35800 36400 37000 37600 38200 38800 39400 40000 40600 41200 41800 42400 43000 43600 44200 44800 45400 46000 46600 47200 47800 48400 49000 49600 50200 50800 51400 52000 52600 53200 53800 54400 55000 55600 56200 56800 57400 58000 58600 59200 59800 60400 61000 62000)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.03 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset player scale winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems cursor-mode score-mode)) (list nil nil (quote :midi-player) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (om-make-point 10 40) (om-make-point 1701 664) 0 1000 nil 1 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 (quote t) (quote :normal) 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 254 98) (om-make-point 80 95) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5300 5300 5200 5000 5200 5100 5200 5000 5200 5300 5200 5100 5300 5300 5000 5200 5300 5200 5100)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (score-mode cursor-mode measure onset scale approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list 0 (quote :normal) nil nil (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote t) (quote :midi-player))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 19 25) (quote "A") "" (om-make-point 1050 216) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 20))) (om-make-point 196 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 4" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 32 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 15 81) (om-make-point 32 28) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3 3" (quote t) (quote nil) (om-make-point 1525 633) (om-make-point 26 26) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 1489 665) (om-make-point 61 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1 4" (quote t) (quote nil) (om-make-point 1524 547) (om-make-point 32 28) 71 "71" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1470 547) (om-make-point 32 28) 67 "67" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 1464 576) (om-make-point 86 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 5))) (om-make-point 1502 713) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 1480 792) (om-make-point 150 102) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7100) (7100) (6700) (7000))) :lonset (quote (0 300 600 900 1200 2200)) :ldur (quote ((1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset player scale winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems)) (list nil nil (quote :midi-player) nil 2621450 18350450 0 1000 nil 1 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 2" (quote t) (quote nil) (om-make-point 181 352) (om-make-point 58 28) (list 0 200) "(0 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 167 290) (om-make-point 180 28) (list 500 500 600 500 500 500 600) "(500 500 600 500 500 500 600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 120 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "escala" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 96 435) (om-make-point 185 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (7000) (7600) (8100) (8600) (9100) (9700))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode measure onset player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 0 (quote :normal) nil nil (quote :midi-player) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -5) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 15 18) (quote "E") "" (om-make-point 335 505) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIDIC" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "VEL" "VEL" 80) (om-load-inputfun (quote input-funbox) "DUR" "DUR" 1000) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" 1))) (om-make-point 53 232) (om-make-point 67 91) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.03 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (score-mode cursor-mode measure onset player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 0 (quote :normal) nil nil (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 14 52) (om-make-point 1753 28) (list 5600 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5100 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5100 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700) "(5600 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5100 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5100 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "coro" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 816 174) (om-make-point 276 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 25600 25800 26000 26200 26400 26600 26800 27000 27200 27400 27600 27800 28000 28200 28400 28600 28800 29000 29200 29400 29600 29800 30000 30200 30400 30600 30800 31000 31200 31400 31600 31800 32000 32200 32400 32600 32800 33000 33200 33400 33600 33800 34000 34200 34400 34600 34800 35000 35200 35400 35600 35800 36000 36200 36400 36600 36800 37000 37200 37400 37600 37800 38000 38200 38400 38600 38800 39000 39200 39400 39600 39800 40000 40200 40400 40600 40800 41000 41200 41400 41600 41800 42000 42200 42400 42600 42800 43000 43200 43400 43600 43800 44000 44200 44400 44600 44800 45000 45200 45400 45600 45800 46000 46200 46400 46600 46800 47000 47200 47400 47600 47800 48000 48200 48400 48600 48800 49000 49200 49400 49600 49800 50000 50200 50400 50600 50800 51000 51200 51400 51600 51800 52000 52200 52400 52600 52800 53000 53200 53400 53600 53800 54000 54200 54400 54600 54800 55000 55200 55400 55600 55800 56000 56200 56400 56600 56800 57000 57200 57400 57600 57800 58000 58200 58400 58600 58800 59000 59200 59400 59600 59800 60000 60200 60400 60600 60800 61000 61200 61400 62400)) :ldur (quotelvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.03 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode measure onset player winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems scale)) (list 0 (quote :normal) nil nil (quote :midi-player) (om-make-point 10 40) (om-make-point 1370 449) 0 1000 nil 1 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 906 89) (om-make-point 82 28) (list 1600 1800) "(1600 1800)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (1 0 3 1 nil 0) (2 0 3 2 nil 0) (16 0 5 0 nil 0) (5 0 7 1 nil 0) (6 0 7 2 nil 0) (14 0 12 0 nil 0) (12 0 13 1 nil 0) (10 0 13 2 nil 0) (33 0 18 0 nil 0) (28 0 19 1 nil 0) (30 1 20 0 nil 0) (48 0 21 0 nil 0) (19 0 22 0 nil 0) (9 0 24 1 nil 0) (23 0 24 2 nil 0) (15 0 24 6 nil 0) (45 0 28 0 nil 0) (29 0 28 1 nil 0) (49 0 28 2 nil 0) (20 0 29 1 nil 0) (27 0 29 2 nil 0) (26 0 29 6 nil 0) (32 0 30 1 nil 0) (18 0 32 0 nil 0) (34 0 33 0 nil 0) (11 0 33 1 nil 0) (39 0 36 0 nil 0) (35 0 36 1 nil 0) (38 0 39 0 nil 0) (37 0 39 1 nil 0) (36 0 40 0 nil 0) (40 0 41 1 nil 0) (8 0 41 2 nil 0) (47 1 44 0 nil 0) (43 0 44 1 nil 0) (44 0 45 1 nil 0) (42 0 45 2 nil 0) (17 0 45 6 nil 0) (21 0 49 1 nil 0) (50 0 49 2 nil 0) (25 0 49 6 nil 0))) nil 7.03))
