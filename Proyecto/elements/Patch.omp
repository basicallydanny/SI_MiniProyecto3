; OM File Header - Saved 2024/09/26 21:20:09
; (7.04 :patc (om-make-point 9 94) (om-make-point -8 -8) (om-make-point 1382 720) "" 183 0 "2024/09/22 12:54:26" "2024/09/26 21:20:09")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:groupseqs.oml\"" "#P\"C:chooseTwo.oml\"" "#P\"C:ourLoop.oml\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ 10" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 1600)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 1600)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 715 909) (om-make-point 146 98) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (7000) (7600) (8100) (8600) (9100) (9700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5300) (5100) (5000) (5200) (5200) (5100) (5200) (5300) (5100) (5300) (5200) (5100) (5200) (5200) (5300) (5200) (5300) (5300) (5300) (5100) (6800 5200) (7000 5400) (6800 -1) (6700 -1) (6500 5200) (7000 5400) (6800 -1) (6700 -1) (6500 5400) (6500 5400) (-1 -1) (6300 -1) (6300 5400) (6100 4800) (6300 -1) (6100 -1) (6000 4800) (6000 5400) (6100 -1) (6000 -1) (-1 5200) (7000 5200) (6900 -1) (6800 -1) (6700 5000) (6700 5200) (6700 -1) (6800 -1) (6900 5000) (6800 5200) (-1 -1) (6000 -1) (6300 5000) (7000 5200) (6900 -1) (6000 -1) (6000 5200) (6300 5200) (7000 -1) (6900 -1) (6000 5200) (6300 5200) (7000 -1) (6900 -1) (6000 5000) (6000 5400) (6300 -1) (7000 -1) (6900 5400) (6000 5400) (6900 -1) (6900 -1) (7000 5400) (7000 5400) (7100 -1) (6800 -1) (7000 5000) (6800 5400) (6700 -1) (6500 -1) (7000 5200) (6800 5000) (6700 -1) (6500 -1) (6500 5000) (-1 4800) (6300 -1) (6300 -1) (6100 5000) (6300 5200) (6100 -1) (6000 -1) (6000 5200) (6100 4800) (6000 -1) (-1 -1) (7000 5000) (6900 5200) (6800 -1) (6700 -1) (6700 5200) (6700 5200) (6800 -1) (6900 -1) (6800 5000) (-1 5000) (6000 -1) (6300 -1) (7000 5200) (6900 5000) (6000 -1) (6000 -1) (6300 4800) (7000 5200) (6900 -1) (6000 -1) (6300 5000) (7000 5000) (6900 -1) (6000 -1) (6000 5400) (6300 5400) (7000 -1) (6900 -1) (6000 4800) (6800 5200) (6700 -1) (6700 -1) (6800 4800) (7000 5000) (6800 -1) (7000 -1) (6800 5200) (6700 5000) (6500 -1) (7000 -1) (6800 5200) (6700 5000) (6500 -1) (6500 -1) (-1 4800) (6300 5200) (6300 -1) (6100 -1) (6300 5200) (6100 5200) (6000 -1) (6000 -1) (6100 4800) (6000 4800) (-1 -1) (7000 -1) (6900 5400) (6800 5400) (6700 -1) (6700 -1) (6700 4800) (6800 5000) (6900 -1) (6800 -1) (-1 5400) (6000 4800) (6300 -1) (7000 -1) (6900 5400) (6000 5200) (6000 -1) (6300 -1) (7000 5200) (6900 5200) (6000 -1) (6300 -1) (7000 4800) (6900 5400) (6000 -1) (6000 -1) (6300 5200) (7000 5200) (6900 -1) (6000 -1) (6000) (5900) (5700) (5500) (5300) (5200) (5000) (4800) (-100) (9100) (9700))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 25600 25800 26000 26200 26400 26600 26800 27000 27200 27400 27600 27800 28000 28200 28400 28600 28800 29000 29200 29400 29600 29800 30000 30200 30400 30600 30800 31000 31200 31400 31600 31800 32000 32200 32400 32600 32800 33000 33200 33400 33600 33800 34000 34200 34400 34600 34800 35000 35200 35400 35600 35800 36000 36200 36400 36600 36800 37000 37200 37400 37600 37800 38000 38200 38400 38600 38800 39000 39200 39400 39600 39800 40000 40200 40400 40600 40800 41000 41200 41400 41600 41800 42000 42200 42400 42600 42800 43000 43200 43400 43600 43800 44000 44200 44400 44600 44800 45000 45200 45400 45600 45800 46000 46200 46400 46600 46800 47000 47200 47400 47600 47800 48000 48200 48400 48600 48800 49000 49200 49400 49600 49800 50000 50200 50400 50600 50800 51000 51200 51400 51600 51800 52000 52200 52400 52600 52800 53000 53200 53400 53600 53800 54000 54200 54400 54600 54800 55000 55200 55400 55600 55800 56000 56200 56400 56600 56800 57000 57200 57400 57600 57800 58000 58200 58400 58600 58800 59000 59200 59400 59600 59800 60000 60200 60400 60600 60800 61000 61200 61400 62400 63000 63600 64200 64800 65400 66000 66600 67200 67800 68400 69000 69600 70200 70800 71400 72000 72600 73200 73800 74400 74800 75200 75600 76000 76400 76800 77200 77600 78000 78400 78800 79200 79600 80000 80400 80800 81200 81600 82000 82400 82800 83200 83600 84000 84400 84800 85200 85600 86000 86400 86800 87200 87600 88000 88400 88800 89200 89600 90000 90400 90800 91200 91600 92000 92400 92800 93200 93600 94000 94400 94800 95200 95600 96000 96400 96800 97200 97600 98000 98400 98800 99200 99600 100000 100400 100800 101200 101600 102000 102400 102800 103200 103600 104000 104400 104800 105200 105600 106000 106400 106800 107200 107600 108000 108400 108800 109200 109600 110000 110400 110800 111200 111600 112000 112400 112800 113200 113600 114000 114400 114800 115200 115600 116000 116400 116800 117200 117600 118000 118400 118800 119200 119600 120000 120400 120800 121200 121600 122000 122400 122800 123200 123600 124000 124400 124800 125200 125600 126000 126400 126800 127200 127600 128000 128400 128800 129200 129600 130000 130400 130800 131200 131600 132000 132400 132800 133200 133600 134000 134400 134800 135200 135600 136000 136400 136800 137200 137600 138000 138400 138600 138800 139000 139200 139400 139600 139800 140000 140200 140400 140600)) :ldur (quotelvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.04 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos scale player onset measure)) (list 0 (quote :normal) (quote t) 0 0 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 (om-make-point 841 351) (om-make-point 10 40) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote :midi-player) nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT 8" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 779 771) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 9" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 1600)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 1600)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 1458 673) (om-make-point 98 107) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800 5200) (7000 5400) (6800 -1) (6700 -1) (6500 5200) (7000 5400) (6800 -1) (6700 -1) (6500 5400) (6500 5400) (-1 -1) (6300 -1) (6300 5400) (6100 4800) (6300 -1) (6100 -1) (6000 4800) (6000 5400) (6100 -1) (6000 -1) (-1 5200) (7000 5200) (6900 -1) (6800 -1) (6700 5000) (6700 5200) (6700 -1) (6800 -1) (6900 5000) (6800 5200) (-1 -1) (6000 -1) (6300 5000) (7000 5200) (6900 -1) (6000 -1) (6000 5200) (6300 5200) (7000 -1) (6900 -1) (6000 5200) (6300 5200) (7000 -1) (6900 -1) (6000 5000) (6000 5400) (6300 -1) (7000 -1) (6900 5400) (6000 5400) (6900 -1) (6900 -1) (7000 5400) (7000 5400) (7100 -1) (6800 -1) (7000 5000) (6800 5400) (6700 -1) (6500 -1) (7000 5200) (6800 5000) (6700 -1) (6500 -1) (6500 5000) (-1 4800) (6300 -1) (6300 -1) (6100 5000) (6300 5200) (6100 -1) (6000 -1) (6000 5200) (6100 4800) (6000 -1) (-1 -1) (7000 5000) (6900 5200) (6800 -1) (6700 -1) (6700 5200) (6700 5200) (6800 -1) (6900 -1) (6800 5000) (-1 5000) (6000 -1) (6300 -1) (7000 5200) (6900 5000) (6000 -1) (6000 -1) (6300 4800) (7000 5200) (6900 -1) (6000 -1) (6300 5000) (7000 5000) (6900 -1) (6000 -1) (6000 5400) (6300 5400) (7000 -1) (6900 -1) (6000 4800) (6800 5200) (6700 -1) (6700 -1) (6800 4800) (7000 5000) (6800 -1) (7000 -1) (6800 5200) (6700 5000) (6500 -1) (7000 -1) (6800 5200) (6700 5000) (6500 -1) (6500 -1) (-1 4800) (6300 5200) (6300 -1) (6100 -1) (6300 5200) (6100 5200) (6000 -1) (6000 -1) (6100 4800) (6000 4800) (-1 -1) (7000 -1) (6900 5400) (6800 5400) (6700 -1) (6700 -1) (6700 4800) (6800 5000) (6900 -1) (6800 -1) (-1 5400) (6000 4800) (6300 -1) (7000 -1) (6900 5400) (6000 5200) (6000 -1) (6300 -1) (7000 5200) (6900 5200) (6000 -1) (6300 -1) (7000 4800) (6900 5400) (6000 -1) (6000 -1) (6300 5200) (7000 5200) (6900 -1) (6000 -1))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400 6800 7200 7600 8000 8400 8800 9200 9600 10000 10400 10800 11200 11600 12000 12400 12800 13200 13600 14000 14400 14800 15200 15600 16000 16400 16800 17200 17600 18000 18400 18800 19200 19600 20000 20400 20800 21200 21600 22000 22400 22800 23200 23600 24000 24400 24800 25200 25600 26000 26400 26800 27200 27600 28000 28400 28800 29200 29600 30000 30400 30800 31200 31600 32000 32400 32800 33200 33600 34000 34400 34800 35200 35600 36000 36400 36800 37200 37600 38000 38400 38800 39200 39600 40000 40400 40800 41200 41600 42000 42400 42800 43200 43600 44000 44400 44800 45200 45600 46000 46400 46800 47200 47600 48000 48400 48800 49200 49600 50000 50400 50800 51200 51600 52000 52400 52800 53200 53600 54000 54400 54800 55200 55600 56000 56400 56800 57200 57600 58000 58400 58800 59200 59600 60000 60400 60800 61200 61600 62000 62400 62800 63200 63600 64600)) :ldur (quotelvel (quote ((100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos scale player onset measure)) (list 0 (quote :interval) (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 (om-make-point 841 256) (om-make-point 10 40) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote :midi-player) nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 3" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1257 666) (om-make-point 100 70) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5200) (5400) (-1) (-1) (5200) (5400) (-1) (-1) (5400) (5400) (-1) (-1) (5400) (4800) (-1) (-1) (4800) (5400) (-1) (-1) (5200) (5200) (-1) (-1) (5000) (5200) (-1) (-1) (5000) (5200) (-1) (-1) (5000) (5200) (-1) (-1) (5200) (5200) (-1) (-1) (5200) (5200) (-1) (-1) (5000) (5400) (-1) (-1) (5400) (5400) (-1) (-1) (5400) (5400) (-1) (-1) (5000) (5400) (-1) (-1) (5200) (5000) (-1) (-1) (5000) (4800) (-1) (-1) (5000) (5200) (-1) (-1) (5200) (4800) (-1) (-1) (5000) (5200) (-1) (-1) (5200) (5200) (-1) (-1) (5000) (5000) (-1) (-1) (5200) (5000) (-1) (-1) (4800) (5200) (-1) (-1) (5000) (5000) (-1) (-1) (5400) (5400) (-1) (-1) (4800) (5200) (-1) (-1) (4800) (5000) (-1) (-1) (5200) (5000) (-1) (-1) (5200) (5000) (-1) (-1) (4800) (5200) (-1) (-1) (5200) (5200) (-1) (-1) (4800) (4800) (-1) (-1) (5400) (5400) (-1) (-1) (4800) (5000) (-1) (-1) (5400) (4800) (-1) (-1) (5400) (5200) (-1) (-1) (5200) (5200) (-1) (-1) (4800) (5400) (-1) (-1) (5200) (5200) (-1) (-1))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400 6800 7200 7600 8000 8400 8800 9200 9600 10000 10400 10800 11200 11600 12000 12400 12800 13200 13600 14000 14400 14800 15200 15600 16000 16400 16800 17200 17600 18000 18400 18800 19200 19600 20000 20400 20800 21200 21600 22000 22400 22800 23200 23600 24000 24400 24800 25200 25600 26000 26400 26800 27200 27600 28000 28400 28800 29200 29600 30000 30400 30800 31200 31600 32000 32400 32800 33200 33600 34000 34400 34800 35200 35600 36000 36400 36800 37200 37600 38000 38400 38800 39200 39600 40000 40400 40800 41200 41600 42000 42400 42800 43200 43600 44000 44400 44800 45200 45600 46000 46400 46800 47200 47600 48000 48400 48800 49200 49600 50000 50400 50800 51200 51600 52000 52400 52800 53200 53600 54000 54400 54800 55200 55600 56000 56400 56800 57200 57600 58000 58400 58800 59200 59600 60000 60400 60800 61200 61600 62000 62400 62800 63200 63600 64600)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7000) (6800) (6700) (6500) (7000) (6800) (6700) (6500) (6500) (-1) (6300) (6300) (6100) (6300) (6100) (6000) (6000) (6100) (6000) (-1) (7000) (6900) (6800) (6700) (6700) (6700) (6800) (6900) (6800) (-1) (6000) (6300) (7000) (6900) (6000) (6000) (6300) (7000) (6900) (6000) (6300) (7000) (6900) (6000) (6000) (6300) (7000) (6900) (6000) (6900) (6900) (7000) (7000) (7100) (6800) (7000) (6800) (6700) (6500) (7000) (6800) (6700) (6500) (6500) (-1) (6300) (6300) (6100) (6300) (6100) (6000) (6000) (6100) (6000) (-1) (7000) (6900) (6800) (6700) (6700) (6700) (6800) (6900) (6800) (-1) (6000) (6300) (7000) (6900) (6000) (6000) (6300) (7000) (6900) (6000) (6300) (7000) (6900) (6000) (6000) (6300) (7000) (6900) (6000) (6800) (6700) (6700) (6800) (7000) (6800) (7000) (6800) (6700) (6500) (7000) (6800) (6700) (6500) (6500) (-1) (6300) (6300) (6100) (6300) (6100) (6000) (6000) (6100) (6000) (-1) (7000) (6900) (6800) (6700) (6700) (6700) (6800) (6900) (6800) (-1) (6000) (6300) (7000) (6900) (6000) (6000) (6300) (7000) (6900) (6000) (6300) (7000) (6900) (6000) (6000) (6300) (7000) (6900) (6000))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400 6800 7200 7600 8000 8400 8800 9200 9600 10000 10400 10800 11200 11600 12000 12400 12800 13200 13600 14000 14400 14800 15200 15600 16000 16400 16800 17200 17600 18000 18400 18800 19200 19600 20000 20400 20800 21200 21600 22000 22400 22800 23200 23600 24000 24400 24800 25200 25600 26000 26400 26800 27200 27600 28000 28400 28800 29200 29600 30000 30400 30800 31200 31600 32000 32400 32800 33200 33600 34000 34400 34800 35200 35600 36000 36400 36800 37200 37600 38000 38400 38800 39200 39600 40000 40400 40800 41200 41600 42000 42400 42800 43200 43600 44000 44400 44800 45200 45600 46000 46400 46800 47200 47600 48000 48400 48800 49200 49600 50000 50400 50800 51200 51600 52000 52400 52800 53200 53600 54000 54400 54800 55200 55600 56000 56400 56800 57200 57600 58000 58400 58800 59200 59600 60000 60400 60800 61200 61600 62000 62400 62800 63200 63600 64000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (list (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 841 350) (om-make-point 400 20) 0 1 (quote :normal) (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) 0 1)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "groupseqs 2" (quote ("elements" "groupseqs")) (quote ((om-load-inputfun (quote input-funbox) "" "SEQ1" nil) (om-load-inputfun (quote input-funbox) "" "SEQ2" nil))) (om-make-point 1159 603) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 8" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 1600)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 1600)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 671 597) (om-make-point 146 98) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (7000) (7600) (8100) (8600) (9100) (9700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 25600 25800 26000 26200 26400 26600 26800 27000 27200 27400 27600 27800 28000 28200 28400 28600 28800 29000 29200 29400 29600 29800 30000 30200 30400 30600 30800 31000 31200 31400 31600 31800 32000 32200 32400 32600 32800 33000 33200 33400 33600 33800 34000 34200 34400 34600 34800 35000 35200 35400 35600 35800 36000 36200 36400 36600 36800 37000 37200 37400 37600 37800 38000 38200 38400 38600 38800 39000 39200 39400 39600 39800 40000 40200 40400 40600 40800 41000 41200 41400 41600 41800 42000 42200 42400 42600 42800 43000 43200 43400 43600 43800 44000 44200 44400 44600 44800 45000 45200 45400 45600 45800 46000 46200 46400 46600 46800 47000 47200 47400 47600 47800 48000 48200 48400 48600 48800 49000 49200 49400 49600 49800 50000 50200 50400 50600 50800 51000 51200 51400 51600 51800 52000 52200 52400 52600 52800 53000 53200 53400 53600 53800 54000 54200 54400 54600 54800 55000 55200 55400 55600 55800 56000 56200 56400 56600 56800 57000 57200 57400 57600 57800 58000 58200 58400 58600 58800 59000 59200 59400 59600 59800 60000 60200 60400 60600 60800 61000 61200 61400 62400)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos scale player onset measure)) (list 0 (quote :normal) (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 (om-make-point 841 256) (om-make-point 10 40) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote :midi-player) nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT 7" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 200 736) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 7" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 166 303) (om-make-point 235 130) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300) (5100) (5000) (5200) (5200) (5100) (5200) (5300) (5100) (5300) (5200) (5100) (5200) (5200) (5300) (5200) (5300) (5300) (5300) (5100))) :lonset (quote (0 600 1200 1800 2400 3000 3600 4200 4800 5400 6000 6600 7200 7800 8400 9000 9600 10200 10800 11400 12400)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos scale player onset measure)) (list 0 (quote :normal) (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 (om-make-point 1370 664) (om-make-point 10 40) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote :midi-player) nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 6" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 1600)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 1600)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 474 423) (om-make-point 346 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 25600 25800 26000 26200 26400 26600 26800 27000 27200 27400 27600 27800 28000 28200 28400 28600 28800 29000 29200 29400 29600 29800 30000 30200 30400 30600 30800 31000 31200 31400 31600 31800 32000 32200 32400 32600 32800 33000 33200 33400 33600 33800 34000 34200 34400 34600 34800 35000 35200 35400 35600 35800 36000 36200 36400 36600 36800 37000 37200 37400 37600 37800 38000 38200 38400 38600 38800 39000 39200 39400 39600 39800 40000 40200 40400 40600 40800 41000 41200 41400 41600 41800 42000 42200 42400 42600 42800 43000 43200 43400 43600 43800 44000 44200 44400 44600 44800 45000 45200 45400 45600 45800 46000 46200 46400 46600 46800 47000 47200 47400 47600 47800 48000 48200 48400 48600 48800 49000 49200 49400 49600 49800 50000 50200 50400 50600 50800 51000 51200 51400 51600 51800 52000 52200 52400 52600 52800 53000 53200 53400 53600 53800 54000 54200 54400 54600 54800 55000 55200 55400 55600 55800 56000 56200 56400 56600 56800 57000 57200 57400 57600 57800 58000 58200 58400 58600 58800 59000 59200 59400 59600 59800 60800)) :ldur (quotelvel (quoteloffset (quote ((0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0))) :lchan (quote ((1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos scale player onset measure)) (list 0 (quote :normal) (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 (om-make-point 841 256) (om-make-point 10 40) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote :midi-player) nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 483 328) (om-make-point 100 70) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (0 600 1200 1800 2400 3000 3600 4200 4800 5400 6000 6600 7200 7800 8400 9000 9600 10200 10800 11400 12000 12600 13200 13800 14400 15000 15600 16200 16800 17400 18000 18600 19200 19800 20400 21000 21600 22200 22800 23400 24000 24600 25200 25800 26400 27000 27600 28200 28800 29400 30000 30600 31200 31800 32400 33000 33600 34200 34800 35400 36000 36600 37200 37800 38400 39000 39600 40200 40800 41400 42000 42600 43200 43800 44400 45000 45600 46200 46800 47400 48000 48600 49200 49800 50400 51000 51600 52200 52800 53400 54000 54600 55200 55800 56400 57000 57600 58200 58800 59400 60400)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 25600 25800 26000 26200 26400 26600 26800 27000 27200 27400 27600 27800 28000 28200 28400 28600 28800 29000 29200 29400 29600 29800 30000 30200 30400 30600 30800 31000 31200 31400 31600 31800 32000 32200 32400 32600 32800 33000 33200 33400 33600 33800 34000 34200 34400 34600 34800 35000 35200 35400 35600 35800 36000 36200 36400 36600 36800 37000 37200 37400 37600 37800 38000 38200 38400 38600 38800 39000 39200 39400 39600 39800 40000 40200 40400 40600 40800 41000 41200 41400 41600 41800 42000 42200 42400 42600 42800 43000 43200 43400 43600 43800 44000 44200 44400 44600 44800 45000 45200 45400 45600 45800 46000 46200 46400 46600 46800 47000 47200 47400 47600 47800 48000 48200 48400 48600 48800 49000 49200 49400 49600 49800 50000 50200 50400 50600 50800 51000 51200 51400 51600 51800 52000 52200 52400 52600 52800 53000 53200 53400 53600 53800 54000 54200 54400 54600 54800 55000 55200 55400 55600 55800 56000 56200 56400 56600 56800 57000 57200 57400 57600 57800 58000 58200 58400 58600 58800 59000 59200 59400 59600 59800 60800)) :ldur (quotelvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (list (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) 0 1)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "groupseqs" (quote ("elements" "groupseqs")) (quote ((om-load-inputfun (quote input-funbox) "" "SEQ1" nil) (om-load-inputfun (quote input-funbox) "" "SEQ2" nil))) (om-make-point 667 329) nil nil nil "groupseqs" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT 6" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 408 646) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "escala 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 4)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 973 839) (om-make-point 185 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800 5200) (7000 5400) (6800 -1) (6700 -1) (6500 5200) (7000 5400) (6800 -1) (6700 -1) (6500 5400) (6500 5400) (-1 -1) (6300 -1) (6300 5400) (6100 4800) (6300 -1) (6100 -1) (6000 4800) (6000 5400) (6100 -1) (6000 -1) (-1 5200) (7000 5200) (6900 -1) (6800 -1) (6700 5000) (6700 5200) (6700 -1) (6800 -1) (6900 5000) (6800 5200) (-1 -1) (6000 -1) (6300 5000) (7000 5200) (6900 -1) (6000 -1) (6000 5200) (6300 5200) (7000 -1) (6900 -1) (6000 5200) (6300 5200) (7000 -1) (6900 -1) (6000 5000) (6000 5400) (6300 -1) (7000 -1) (6900 5400) (6000 5400) (6900 -1) (6900 -1) (7000 5400) (7000 5400) (7100 -1) (6800 -1) (7000 5000) (6800 5400) (6700 -1) (6500 -1) (7000 5200) (6800 5000) (6700 -1) (6500 -1) (6500 5000) (-1 4800) (6300 -1) (6300 -1) (6100 5000) (6300 5200) (6100 -1) (6000 -1) (6000 5200) (6100 4800) (6000 -1) (-1 -1) (7000 5000) (6900 5200) (6800 -1) (6700 -1) (6700 5200) (6700 5200) (6800 -1) (6900 -1) (6800 5000) (-1 5000) (6000 -1) (6300 -1) (7000 5200) (6900 5000) (6000 -1) (6000 -1) (6300 4800) (7000 5200) (6900 -1) (6000 -1) (6300 5000) (7000 5000) (6900 -1) (6000 -1) (6000 5400) (6300 5400) (7000 -1) (6900 -1) (6000 4800) (6800 5200) (6700 -1) (6700 -1) (6800 4800) (7000 5000) (6800 -1) (7000 -1) (6800 5200) (6700 5000) (6500 -1) (7000 -1) (6800 5200) (6700 5000) (6500 -1) (6500 -1) (-1 4800) (6300 5200) (6300 -1) (6100 -1) (6300 5200) (6100 5200) (6000 -1) (6000 -1) (6100 4800) (6000 4800) (-1 -1) (7000 -1) (6900 5400) (6800 5400) (6700 -1) (6700 -1) (6700 4800) (6800 5000) (6900 -1) (6800 -1) (-1 5400) (6000 4800) (6300 -1) (7000 -1) (6900 5400) (6000 5200) (6000 -1) (6300 -1) (7000 5200) (6900 5200) (6000 -1) (6300 -1) (7000 4800) (6900 5400) (6000 -1) (6000 -1) (6300 5200) (7000 5200) (6900 -1) (6000 -1) (6000) (5900) (5700) (5500) (5300) (5200) (5000) (4800) (-100) (9100) (9700))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400 6800 7200 7600 8000 8400 8800 9200 9600 10000 10400 10800 11200 11600 12000 12400 12800 13200 13600 14000 14400 14800 15200 15600 16000 16400 16800 17200 17600 18000 18400 18800 19200 19600 20000 20400 20800 21200 21600 22000 22400 22800 23200 23600 24000 24400 24800 25200 25600 26000 26400 26800 27200 27600 28000 28400 28800 29200 29600 30000 30400 30800 31200 31600 32000 32400 32800 33200 33600 34000 34400 34800 35200 35600 36000 36400 36800 37200 37600 38000 38400 38800 39200 39600 40000 40400 40800 41200 41600 42000 42400 42800 43200 43600 44000 44400 44800 45200 45600 46000 46400 46800 47200 47600 48000 48400 48800 49200 49600 50000 50400 50800 51200 51600 52000 52400 52800 53200 53600 54000 54400 54800 55200 55600 56000 56400 56800 57200 57600 58000 58400 58800 59200 59600 60000 60400 60800 61200 61600 62000 62400 62800 63200 63600 64000 64200 64400 64600 64800 65000 65200 65400 65600 65800 66000 66200)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (400 1000) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player onset measure cursor-mode score-mode)) (list (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote t) 0 0 (om-make-point 10 40) (om-make-point 826 417) 0 1000 nil 1 0 0 (om-make-point 0 -5) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midi-player) nil nil (quote :normal) 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT 5" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 1729 680) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT 4" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 1291 548) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT 3" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 1375 489) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT 2" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 1377 398) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 1246 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 4)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1471 183) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7000) (6800) (6700) (6500) (7000) (6800) (6700) (6500) (6500) (-1) (6300) (6300) (6100) (6300) (6100) (6000) (6000) (6100) (6000) (-1) (7000) (6900) (6800) (6700) (6700) (6700) (6800) (6900) (6800) (-1))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400 6800 7200 7600 8000 8400 8800 9200 9600 10000 10400 10800 11200 11600 12000 13000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 719 256) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 1009 88) (om-make-point 870 28) (list 6800 7000 6800 6700 6500 7000 6800 6700 6500 6500 -1 6300 6300 6100 6300 6100 6000 6000 6100 6000 -1 7000 6900 6800 6700 6700 6700 6800 6900 6800 -1) "(6800 7000 6800 6700 6500 7000 6800 6700 6500 6500 -1 6300 6300 6100 6300 6100 6000 6000 6100 6000 -1 7000 6900 6800 6700 6700 6700 6800 6900 6800 -1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 4" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 1212 189) (om-make-point 61 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 6" (quote t) (quote nil) (om-make-point 1279 198) (om-make-point 58 28) (list 0 400) "(0 400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "escala 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 4)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 1190 249) (om-make-point 185 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6300) (7000) (6900) (6000) (6000) (6300) (7000) (6900) (6000) (6300) (7000) (6900) (6000) (6000) (6300) (7000) (6900) (6000))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400 6800 7200 7600)) :ldur (quote ((400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400) (400))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player onset measure cursor-mode score-mode)) (list (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote t) 0 0 (om-make-point 10 40) (om-make-point 826 256) 0 1000 nil 1 0 0 (om-make-point 0 -5) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midi-player) nil nil (quote :normal) 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 1100 134) (om-make-point 330 28) (list 60 63 70 69 60 60 63 70 69 60 63 70 69 60 60 63 70 69 60) "(60 63 70 69 60 60 63 70 69 60 63 70 69 60 60 63 70 69 60)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 1683 210) (om-make-point 61 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 4" (quote t) (quote nil) (om-make-point 1800 199) (om-make-point 58 28) (list 0 200) "(0 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "escala 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 1672 272) (om-make-point 185 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5900) (5700) (5500) (5300) (5200) (5000) (4800) (-100) (9100) (9700))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player onset measure cursor-mode score-mode)) (list (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote t) 0 0 (om-make-point 10 40) (om-make-point 891 256) 0 1000 nil 1 0 0 (om-make-point 0 -5) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midi-player) nil nil (quote :normal) 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 1613 447) (om-make-point 58 28) (list 0 400) "(0 400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 1085 375) (om-make-point 58 28) (list 0 400) "(0 400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 63 82) (om-make-point 22 28) 53 "53" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "chooseTwo" (quote ("elements" "chooseTwo")) (quote ((om-load-inputfun (quote input-funbox) "" "NOTES" nil) (om-load-inputfun (quote input-funbox) "" "N" 40))) (om-make-point 1007 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 200)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" 3) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 1001 443) (om-make-point 171 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5200) (5400) (-1) (-1) (5200) (5400) (-1) (-1) (5400) (5400) (-1) (-1) (5400) (4800) (-1) (-1) (4800) (5400) (-1) (-1) (5200) (5200) (-1) (-1) (5000) (5200) (-1) (-1) (5000) (5200) (-1) (-1) (5000) (5200) (-1) (-1) (5200) (5200) (-1) (-1) (5200) (5200) (-1) (-1) (5000) (5400) (-1) (-1) (5400) (5400) (-1) (-1) (5400) (5400) (-1) (-1) (5000) (5400) (-1) (-1) (5200) (5000) (-1) (-1) (5000) (4800) (-1) (-1) (5000) (5200) (-1) (-1) (5200) (4800) (-1) (-1) (5000) (5200) (-1) (-1) (5200) (5200) (-1) (-1) (5000) (5000) (-1) (-1) (5200) (5000) (-1) (-1) (4800) (5200) (-1) (-1) (5000) (5000) (-1) (-1) (5400) (5400) (-1) (-1) (4800) (5200) (-1) (-1) (4800) (5000) (-1) (-1) (5200) (5000) (-1) (-1) (5200) (5000) (-1) (-1) (4800) (5200) (-1) (-1) (5200) (5200) (-1) (-1) (4800) (4800) (-1) (-1) (5400) (5400) (-1) (-1) (4800) (5000) (-1) (-1) (5400) (4800) (-1) (-1) (5400) (5200) (-1) (-1) (5200) (5200) (-1) (-1) (4800) (5400) (-1) (-1) (5200) (5200) (-1) (-1))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400 6800 7200 7600 8000 8400 8800 9200 9600 10000 10400 10800 11200 11600 12000 12400 12800 13200 13600 14000 14400 14800 15200 15600 16000 16400 16800 17200 17600 18000 18400 18800 19200 19600 20000 20400 20800 21200 21600 22000 22400 22800 23200 23600 24000 24400 24800 25200 25600 26000 26400 26800 27200 27600 28000 28400 28800 29200 29600 30000 30400 30800 31200 31600 32000 32400 32800 33200 33600 34000 34400 34800 35200 35600 36000 36400 36800 37200 37600 38000 38400 38800 39200 39600 40000 40400 40800 41200 41600 42000 42400 42800 43200 43600 44000 44400 44800 45200 45600 46000 46400 46800 47200 47600 48000 48400 48800 49200 49600 50000 50400 50800 51200 51600 52000 52400 52800 53200 53600 54000 54400 54800 55200 55600 56000 56400 56800 57200 57600 58000 58400 58800 59200 59600 60000 60400 60800 61200 61600 62000 62400 62800 63200 63600 64600)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos scale player onset measure)) (list 0 (quote :normal) (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 (om-make-point 1370 516) (om-make-point 10 40) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote :midi-player) nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 1003 308) (om-make-point 138 28) (list 4800 5200 5400 5000) "(4800 5200 5400 5000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 1670 139) (om-make-point 201 40) (list 60 59 57 55 53 52 50 48 -1 91 97) "(60 59 57 55 53 52 50 48 -1 91 97)$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 108 189) (om-make-point 61 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 495 609) (om-make-point 100 70) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (7000) (7600) (8100) (8600) (9100) (9700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 25600 25800 26000 26200 26400 26600 26800 27000 27200 27400 27600 27800 28000 28200 28400 28600 28800 29000 29200 29400 29600 29800 30000 30200 30400 30600 30800 31000 31200 31400 31600 31800 32000 32200 32400 32600 32800 33000 33200 33400 33600 33800 34000 34200 34400 34600 34800 35000 35200 35400 35600 35800 36000 36200 36400 36600 36800 37000 37200 37400 37600 37800 38000 38200 38400 38600 38800 39000 39200 39400 39600 39800 40000 40200 40400 40600 40800 41000 41200 41400 41600 41800 42000 42200 42400 42600 42800 43000 43200 43400 43600 43800 44000 44200 44400 44600 44800 45000 45200 45400 45600 45800 46000 46200 46400 46600 46800 47000 47200 47400 47600 47800 48000 48200 48400 48600 48800 49000 49200 49400 49600 49800 50000 50200 50400 50600 50800 51000 51200 51400 51600 51800 52000 52200 52400 52600 52800 53000 53200 53400 53600 53800 54000 54200 54400 54600 54800 55000 55200 55400 55600 55800 56000 56200 56400 56600 56800 57000 57200 57400 57600 57800 58000 58200 58400 58600 58800 59000 59200 59400 59600 59800 60000 60200 60400 60600 60800 61000 61200 61400 62400)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (list (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) 0 1)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "ourLoop 2" (quote ("elements" "ourLoop")) (quote ((om-load-inputfun (quote input-funbox) "" "LST" nil) (om-load-inputfun (quote input-funbox) "" "N" 5))) (om-make-point 316 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "ourLoop" (quote ("elements" "ourLoop")) (quote ((om-load-inputfun (quote input-funbox) "" "LST" nil) (om-load-inputfun (quote input-funbox) "" "N" 5))) (om-make-point 854 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 1600)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 1600)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 521 750) (om-make-point 98 107) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (7000) (7600) (8100) (8600) (9100) (9700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5600 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5000) (5600) (5400) (5100 5200) (4700) (5600) (5400 5000) (5100) (4700) (5100 5100) (5100) (4700) (5600 5000) (5400) (5100) (4700 5100) (5600) (5400) (5100 5000) (4700) (5600) (5400 5000) (5100) (4700) (5600 5000) (5100) (4700) (5600 5200) (5400) (5100) (4700 5100) (5600) (5400) (5100 5200) (4700) (5600) (5400 5200) (5100) (4700) (5100 5200) (5100) (4700) (5600 5300) (5400) (5100) (4700 5300) (5600) (5400) (5100 5100) (4700) (5600) (5400 5300) (5100) (4700) (5300) (5100) (5000) (5200) (5200) (5100) (5200) (5300) (5100) (5300) (5200) (5100) (5200) (5200) (5300) (5200) (5300) (5300) (5300) (5100))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 25600 25800 26000 26200 26400 26600 26800 27000 27200 27400 27600 27800 28000 28200 28400 28600 28800 29000 29200 29400 29600 29800 30000 30200 30400 30600 30800 31000 31200 31400 31600 31800 32000 32200 32400 32600 32800 33000 33200 33400 33600 33800 34000 34200 34400 34600 34800 35000 35200 35400 35600 35800 36000 36200 36400 36600 36800 37000 37200 37400 37600 37800 38000 38200 38400 38600 38800 39000 39200 39400 39600 39800 40000 40200 40400 40600 40800 41000 41200 41400 41600 41800 42000 42200 42400 42600 42800 43000 43200 43400 43600 43800 44000 44200 44400 44600 44800 45000 45200 45400 45600 45800 46000 46200 46400 46600 46800 47000 47200 47400 47600 47800 48000 48200 48400 48600 48800 49000 49200 49400 49600 49800 50000 50200 50400 50600 50800 51000 51200 51400 51600 51800 52000 52200 52400 52600 52800 53000 53200 53400 53600 53800 54000 54200 54400 54600 54800 55000 55200 55400 55600 55800 56000 56200 56400 56600 56800 57000 57200 57400 57600 57800 58000 58200 58400 58600 58800 59000 59200 59400 59600 59800 60000 60200 60400 60600 60800 61000 61200 61400 62400 63000 63600 64200 64800 65400 66000 66600 67200 67800 68400 69000 69600 70200 70800 71400 72000 72600 73200 73800 74800)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1 2) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos scale player onset measure)) (list 0 (quote :interval) (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 (om-make-point 841 256) (om-make-point 10 40) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote :midi-player) nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 5" (quote t) (quote nil) (om-make-point 1535 126) (om-make-point 58 28) (list 0 400) "(0 400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 3" (quote t) (quote nil) (om-make-point 537 97) (om-make-point 58 28) (list 0 600) "(0 600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 2)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 433 168) (om-make-point 346 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (0 600 1200 1800 2400 3000 3600 4200 4800 5400 6000 6600 7200 7800 8400 9000 9600 10200 10800 11400 12000 12600 13200 13800 14400 15000 15600 16200 16800 17400 18000 18600 19200 19800 20400 21000 21600 22200 22800 23400 24000 24600 25200 25800 26400 27000 27600 28200 28800 29400 30000 30600 31200 31800 32400 33000 33600 34200 34800 35400 36000 36600 37200 37800 38400 39000 39600 40200 40800 41400 42000 42600 43200 43800 44400 45000 45600 46200 46800 47400 48000 48600 49200 49800 50400 51000 51600 52200 52800 53400 54000 54600 55200 55800 56400 57000 57600 58200 58800 59400 60400)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos scale player onset measure)) (list 0 (quote :normal) (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 (om-make-point 1370 664) (om-make-point 10 40) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote :midi-player) nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 254 98) (om-make-point 80 95) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 5200 5000 5300 5000 5000 5000 5000 5200 5000 5000 5200 5200 5300 5300 5100 5000 5300 5000 5200)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale onset measure cursor-mode score-mode)) (list (quote :midi-player) (quote t) 0 0 (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) nil nil (quote :normal) 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 19 25) (quote "A") "" (om-make-point 1050 216) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 20))) (om-make-point 196 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 4" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 32 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 15 81) (om-make-point 32 28) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3 3" (quote t) (quote nil) (om-make-point 1577 372) (om-make-point 26 26) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 1541 404) (om-make-point 61 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1 4" (quote t) (quote nil) (om-make-point 1576 286) (om-make-point 32 28) 71 "71" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1522 286) (om-make-point 32 28) 67 "67" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 1516 315) (om-make-point 86 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 5))) (om-make-point 1528 452) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 4)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 1518 541) (om-make-point 150 102) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6700) (6700) (6800) (7000))) :lonset (quote (0 400 800 1200 1600 2600)) :ldur (quote ((1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos scale player onset measure)) (list (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 18350450 2621450 nil (quote :midi-player) nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 2" (quote t) (quote nil) (om-make-point 358 485) (om-make-point 58 28) (list 0 200) "(0 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 219 456) (om-make-point 180 28) (list 500 500 600 500 500 500 600) "(500 500 600 500 500 500 600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 116 503) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "escala" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 234 530) (om-make-point 185 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (7000) (7600) (8100) (8600) (9100) (9700))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player onset measure cursor-mode score-mode)) (list (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote t) 0 0 (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 -5) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midi-player) nil nil (quote :normal) 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIDIC" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "VEL" "VEL" 80) (om-load-inputfun (quote input-funbox) "DUR" "DUR" 1000) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" 1))) (om-make-point 41 374) (om-make-point 67 91) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.04 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player onset measure cursor-mode score-mode)) (list (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote t) 0 0 (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare) nil nil (quote :normal) 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 14 52) (om-make-point 1753 28) (list 5600 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5100 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5100 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700) "(5600 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5100 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5100 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700 5600 5400 5100 4700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "coro" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 816 174) (om-make-point 276 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 25600 25800 26000 26200 26400 26600 26800 27000 27200 27400 27600 27800 28000 28200 28400 28600 28800 29000 29200 29400 29600 29800 30000 30200 30400 30600 30800 31000 31200 31400 31600 31800 32000 32200 32400 32600 32800 33000 33200 33400 33600 33800 34000 34200 34400 34600 34800 35000 35200 35400 35600 35800 36000 36200 36400 36600 36800 37000 37200 37400 37600 37800 38000 38200 38400 38600 38800 39000 39200 39400 39600 39800 40000 40200 40400 40600 40800 41000 41200 41400 41600 41800 42000 42200 42400 42600 42800 43000 43200 43400 43600 43800 44000 44200 44400 44600 44800 45000 45200 45400 45600 45800 46000 46200 46400 46600 46800 47000 47200 47400 47600 47800 48000 48200 48400 48600 48800 49000 49200 49400 49600 49800 50000 50200 50400 50600 50800 51000 51200 51400 51600 51800 52000 52200 52400 52600 52800 53000 53200 53400 53600 53800 54000 54200 54400 54600 54800 55000 55200 55400 55600 55800 56000 56200 56400 56600 56800 57000 57200 57400 57600 57800 58000 58200 58400 58600 58800 59000 59200 59400 59600 59800 60800)) :ldur (quotelvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos player onset measure cursor-mode score-mode)) (list (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)) (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 (om-make-point 1370 449) (om-make-point 10 40) (quote :midi-player) nil nil (quote :normal) 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 906 89) (om-make-point 58 28) (list 0 200) "(0 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (38 0 1 0 nil 0) (12 0 1 1 nil 0) (3 0 2 0 nil 0) (4 0 3 1 nil 0) (31 0 4 0 nil 0) (14 0 4 1 nil 0) (35 0 5 0 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (42 1 7 1 nil 0) (41 2 7 2 nil 0) (9 0 8 0 nil 0) (10 0 9 1 nil 0) (41 0 10 0 nil 0) (60 0 10 1 nil 0) (57 0 11 0 nil 0) (8 0 11 1 nil 0) (13 0 12 0 nil 0) (2 0 13 0 nil 0) (26 0 13 1 nil 0) (15 0 14 0 nil 0) (17 0 14 1 nil 0) (16 0 15 0 nil 0) (16 0 15 1 nil 0) (17 0 16 0 nil 0) (53 0 16 1 nil 0) (18 0 17 0 nil 0) (22 0 17 1 nil 0) (19 0 18 1 nil 0) (39 0 18 2 nil 0) (23 0 20 0 nil 0) (20 0 22 1 nil 0) (21 0 22 2 nil 0) (33 0 24 0 nil 0) (24 0 26 1 nil 0) (25 0 26 2 nil 0) (32 0 30 0 nil 0) (30 0 31 1 nil 0) (28 0 31 2 nil 0) (45 0 34 0 nil 0) (11 0 35 0 nil 0) (42 1 36 0 nil 0) (59 0 37 0 nil 0) (6 0 38 0 nil 0) (36 0 41 1 nil 0) (40 0 41 2 nil 0) (44 0 42 1 nil 0) (34 0 44 0 nil 0) (46 0 45 0 nil 0) (29 0 45 1 nil 0) (51 0 48 0 nil 0) (47 0 48 1 nil 0) (50 0 51 0 nil 0) (49 0 51 1 nil 0) (48 0 52 0 nil 0) (52 0 53 1 nil 0) (27 0 53 2 nil 0) (58 1 56 0 nil 0) (55 0 56 1 nil 0) (56 0 57 1 nil 0) (54 0 57 2 nil 0) (37 0 60 1 nil 0) (61 0 60 2 nil 0))) nil 7.04))